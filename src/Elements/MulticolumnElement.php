<?php

namespace Firesphere\Multicolumn\Elements;

use DNADesign\Elemental\Models\BaseElement;
use Firesphere\RangeField\RangeField;
use SilverStripe\Core\Config\Configurable;
use SilverStripe\Forms\DropdownField;
use SilverStripe\ORM\FieldType\DBHTMLText;
use SilverStripe\ORM\FieldType\DBInt;
use SilverStripe\ORM\FieldType\DBVarchar;

/**
 * Class \Firesphere\Multicolumn\Elements\MulticolumnElement
 *
 * @property string $Content1
 * @property string $Content1Align
 * @property string $Content2
 * @property string $Content2Align
 * @property int $Width1
 */
class MulticolumnElement extends BaseElement
{
    use Configurable;

    private static $table_name = 'MulticolumnElement';

    private static $db = [
        'Content1'      => DBHTMLText::class,
        'Content1Align' => DBVarchar::class,
        'Content2'      => DBHTMLText::class,
        'Content2Align' => DBVarchar::class,
        'Width1'        => DBInt::class
    ];

    private static $align = [
        'start'  => 'Left',
        'center' => 'Center',
        'end'    => 'Right'
    ];

    private static $config = [
        'start' => 1,
        'end'   => 12,
    ];

    public function getCMSFields()
    {
        $fields = parent::getCMSFields();

        $config = $this->config()->get('config') ?? static::$config;
        $conf['0%'] = $config['start'];
        for ($i = ($config['start'] + 1); $i < $config['end']; $i++) {
            $key = $i - 1;
            $key = $key / ($config['end'] - 1);
            $conf[($key * 100) . '%'] = $i;
        }
        $conf['100%'] = $config['end'];

        $fields->insertBefore('Content1',
            $rangeField = RangeField::create(
                $field = 'Width1',
                $title = 'Width of field 1',
                $config['start'],
                $config['start'],
                $config['end'],
                $conf
            ));

        $fields->insertAfter('Content1',
            DropdownField::create('Content1Align', 'Align content 1', self::$align)
        );
        $fields->insertAfter('Content2',
            DropdownField::create('Content2Align', 'Align content 1', self::$align)
        );

        $rangeField->setSnap(true);
        $rangeField->setDecimalPlaces(0);

        return $fields;
    }

    public function getType()
    {
        return _t(__CLASS__ . '.BlockType', 'Multicolumn');
    }

    public function inlineEditable()
    {
        return false;
    }

    public function onBeforeWrite()
    {
        $this->Width1 = (int)$this->Width1;
        parent::onBeforeWrite(); // TODO: Change the autogenerated stub
    }

    public function getWidth2()
    {
        $conf = $this->config()->get('config') ?? static::$config;

        return ($conf['end'] - $this->Width1);
    }
}